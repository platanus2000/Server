// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_INCLUDED_Login_2eproto
#define PROTOBUF_INCLUDED_Login_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MsgID.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Login_2eproto 

namespace protobuf_Login_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Login_2eproto
namespace Vera {
class LoginAck;
class LoginAckDefaultTypeInternal;
extern LoginAckDefaultTypeInternal _LoginAck_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
}  // namespace Vera
namespace google {
namespace protobuf {
template<> ::Vera::LoginAck* Arena::CreateMaybeMessage<::Vera::LoginAck>(Arena*);
template<> ::Vera::LoginReq* Arena::CreateMaybeMessage<::Vera::LoginReq>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Vera {

// ===================================================================

class LoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vera.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginReq* other);
  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(NULL);
  }

  LoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string passward = 2;
  void clear_passward();
  static const int kPasswardFieldNumber = 2;
  const ::std::string& passward() const;
  void set_passward(const ::std::string& value);
  #if LANG_CXX11
  void set_passward(::std::string&& value);
  #endif
  void set_passward(const char* value);
  void set_passward(const char* value, size_t size);
  ::std::string* mutable_passward();
  ::std::string* release_passward();
  void set_allocated_passward(::std::string* passward);

  // @@protoc_insertion_point(class_scope:Vera.LoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passward_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Login_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vera.LoginAck) */ {
 public:
  LoginAck();
  virtual ~LoginAck();

  LoginAck(const LoginAck& from);

  inline LoginAck& operator=(const LoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAck(LoginAck&& from) noexcept
    : LoginAck() {
    *this = ::std::move(from);
  }

  inline LoginAck& operator=(LoginAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAck* internal_default_instance() {
    return reinterpret_cast<const LoginAck*>(
               &_LoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginAck* other);
  friend void swap(LoginAck& a, LoginAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAck* New() const final {
    return CreateMaybeMessage<LoginAck>(NULL);
  }

  LoginAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginAck& from);
  void MergeFrom(const LoginAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string passward = 3;
  void clear_passward();
  static const int kPasswardFieldNumber = 3;
  const ::std::string& passward() const;
  void set_passward(const ::std::string& value);
  #if LANG_CXX11
  void set_passward(::std::string&& value);
  #endif
  void set_passward(const char* value);
  void set_passward(const char* value, size_t size);
  ::std::string* mutable_passward();
  ::std::string* release_passward();
  void set_allocated_passward(::std::string* passward);

  // .Vera.ErrorCodeID error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::Vera::ErrorCodeID error() const;
  void set_error(::Vera::ErrorCodeID value);

  // @@protoc_insertion_point(class_scope:Vera.LoginAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passward_;
  int error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Login_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginReq

// string account = 1;
inline void LoginReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReq::account() const {
  // @@protoc_insertion_point(field_get:Vera.LoginReq.account)
  return account_.GetNoArena();
}
inline void LoginReq::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Vera.LoginReq.account)
}
#if LANG_CXX11
inline void LoginReq::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Vera.LoginReq.account)
}
#endif
inline void LoginReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Vera.LoginReq.account)
}
inline void LoginReq::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Vera.LoginReq.account)
}
inline ::std::string* LoginReq::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Vera.LoginReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_account() {
  // @@protoc_insertion_point(field_release:Vera.LoginReq.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Vera.LoginReq.account)
}

// string passward = 2;
inline void LoginReq::clear_passward() {
  passward_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReq::passward() const {
  // @@protoc_insertion_point(field_get:Vera.LoginReq.passward)
  return passward_.GetNoArena();
}
inline void LoginReq::set_passward(const ::std::string& value) {
  
  passward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Vera.LoginReq.passward)
}
#if LANG_CXX11
inline void LoginReq::set_passward(::std::string&& value) {
  
  passward_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Vera.LoginReq.passward)
}
#endif
inline void LoginReq::set_passward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Vera.LoginReq.passward)
}
inline void LoginReq::set_passward(const char* value, size_t size) {
  
  passward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Vera.LoginReq.passward)
}
inline ::std::string* LoginReq::mutable_passward() {
  
  // @@protoc_insertion_point(field_mutable:Vera.LoginReq.passward)
  return passward_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_passward() {
  // @@protoc_insertion_point(field_release:Vera.LoginReq.passward)
  
  return passward_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_passward(::std::string* passward) {
  if (passward != NULL) {
    
  } else {
    
  }
  passward_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passward);
  // @@protoc_insertion_point(field_set_allocated:Vera.LoginReq.passward)
}

// -------------------------------------------------------------------

// LoginAck

// .Vera.ErrorCodeID error = 1;
inline void LoginAck::clear_error() {
  error_ = 0;
}
inline ::Vera::ErrorCodeID LoginAck::error() const {
  // @@protoc_insertion_point(field_get:Vera.LoginAck.error)
  return static_cast< ::Vera::ErrorCodeID >(error_);
}
inline void LoginAck::set_error(::Vera::ErrorCodeID value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:Vera.LoginAck.error)
}

// string account = 2;
inline void LoginAck::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginAck::account() const {
  // @@protoc_insertion_point(field_get:Vera.LoginAck.account)
  return account_.GetNoArena();
}
inline void LoginAck::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Vera.LoginAck.account)
}
#if LANG_CXX11
inline void LoginAck::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Vera.LoginAck.account)
}
#endif
inline void LoginAck::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Vera.LoginAck.account)
}
inline void LoginAck::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Vera.LoginAck.account)
}
inline ::std::string* LoginAck::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Vera.LoginAck.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginAck::release_account() {
  // @@protoc_insertion_point(field_release:Vera.LoginAck.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginAck::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Vera.LoginAck.account)
}

// string passward = 3;
inline void LoginAck::clear_passward() {
  passward_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginAck::passward() const {
  // @@protoc_insertion_point(field_get:Vera.LoginAck.passward)
  return passward_.GetNoArena();
}
inline void LoginAck::set_passward(const ::std::string& value) {
  
  passward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Vera.LoginAck.passward)
}
#if LANG_CXX11
inline void LoginAck::set_passward(::std::string&& value) {
  
  passward_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Vera.LoginAck.passward)
}
#endif
inline void LoginAck::set_passward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Vera.LoginAck.passward)
}
inline void LoginAck::set_passward(const char* value, size_t size) {
  
  passward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Vera.LoginAck.passward)
}
inline ::std::string* LoginAck::mutable_passward() {
  
  // @@protoc_insertion_point(field_mutable:Vera.LoginAck.passward)
  return passward_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginAck::release_passward() {
  // @@protoc_insertion_point(field_release:Vera.LoginAck.passward)
  
  return passward_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginAck::set_allocated_passward(::std::string* passward) {
  if (passward != NULL) {
    
  } else {
    
  }
  passward_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passward);
  // @@protoc_insertion_point(field_set_allocated:Vera.LoginAck.passward)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Vera

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Login_2eproto
