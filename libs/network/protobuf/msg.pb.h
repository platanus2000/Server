// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_INCLUDED_msg_2eproto
#define PROTOBUF_INCLUDED_msg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_2eproto 

namespace protobuf_msg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_2eproto
namespace pb {
class BroadCast;
class BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class MovePackage;
class MovePackageDefaultTypeInternal;
extern MovePackageDefaultTypeInternal _MovePackage_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SyncPid;
class SyncPidDefaultTypeInternal;
extern SyncPidDefaultTypeInternal _SyncPid_default_instance_;
class SyncPlayers;
class SyncPlayersDefaultTypeInternal;
extern SyncPlayersDefaultTypeInternal _SyncPlayers_default_instance_;
class Talk;
class TalkDefaultTypeInternal;
extern TalkDefaultTypeInternal _Talk_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::BroadCast* Arena::CreateMaybeMessage<::pb::BroadCast>(Arena*);
template<> ::pb::MovePackage* Arena::CreateMaybeMessage<::pb::MovePackage>(Arena*);
template<> ::pb::Player* Arena::CreateMaybeMessage<::pb::Player>(Arena*);
template<> ::pb::Position* Arena::CreateMaybeMessage<::pb::Position>(Arena*);
template<> ::pb::SyncPid* Arena::CreateMaybeMessage<::pb::SyncPid>(Arena*);
template<> ::pb::SyncPlayers* Arena::CreateMaybeMessage<::pb::SyncPlayers>(Arena*);
template<> ::pb::Talk* Arena::CreateMaybeMessage<::pb::Talk>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class SyncPid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SyncPid) */ {
 public:
  SyncPid();
  virtual ~SyncPid();

  SyncPid(const SyncPid& from);

  inline SyncPid& operator=(const SyncPid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncPid(SyncPid&& from) noexcept
    : SyncPid() {
    *this = ::std::move(from);
  }

  inline SyncPid& operator=(SyncPid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncPid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPid* internal_default_instance() {
    return reinterpret_cast<const SyncPid*>(
               &_SyncPid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SyncPid* other);
  friend void swap(SyncPid& a, SyncPid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncPid* New() const final {
    return CreateMaybeMessage<SyncPid>(NULL);
  }

  SyncPid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncPid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncPid& from);
  void MergeFrom(const SyncPid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SyncPid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Player* other);
  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(NULL);
  }

  Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UserName = 3;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // .pb.Position pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  private:
  const ::pb::Position& _internal_pos() const;
  public:
  const ::pb::Position& pos() const;
  ::pb::Position* release_pos();
  ::pb::Position* mutable_pos();
  void set_allocated_pos(::pb::Position* pos);

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::pb::Position* pos_;
  ::google::protobuf::int32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncPlayers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SyncPlayers) */ {
 public:
  SyncPlayers();
  virtual ~SyncPlayers();

  SyncPlayers(const SyncPlayers& from);

  inline SyncPlayers& operator=(const SyncPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncPlayers(SyncPlayers&& from) noexcept
    : SyncPlayers() {
    *this = ::std::move(from);
  }

  inline SyncPlayers& operator=(SyncPlayers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncPlayers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayers* internal_default_instance() {
    return reinterpret_cast<const SyncPlayers*>(
               &_SyncPlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SyncPlayers* other);
  friend void swap(SyncPlayers& a, SyncPlayers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayers* New() const final {
    return CreateMaybeMessage<SyncPlayers>(NULL);
  }

  SyncPlayers* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayers>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncPlayers& from);
  void MergeFrom(const SyncPlayers& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Player ps = 1;
  int ps_size() const;
  void clear_ps();
  static const int kPsFieldNumber = 1;
  ::pb::Player* mutable_ps(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Player >*
      mutable_ps();
  const ::pb::Player& ps(int index) const;
  ::pb::Player* add_ps();
  const ::google::protobuf::RepeatedPtrField< ::pb::Player >&
      ps() const;

  // @@protoc_insertion_point(class_scope:pb.SyncPlayers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Player > ps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(NULL);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float v = 4;
  void clear_v();
  static const int kVFieldNumber = 4;
  float v() const;
  void set_v(float value);

  // int32 hp = 5;
  void clear_hp();
  static const int kHpFieldNumber = 5;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float v_;
  ::google::protobuf::int32 hp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MovePackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MovePackage) */ {
 public:
  MovePackage();
  virtual ~MovePackage();

  MovePackage(const MovePackage& from);

  inline MovePackage& operator=(const MovePackage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MovePackage(MovePackage&& from) noexcept
    : MovePackage() {
    *this = ::std::move(from);
  }

  inline MovePackage& operator=(MovePackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MovePackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovePackage* internal_default_instance() {
    return reinterpret_cast<const MovePackage*>(
               &_MovePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MovePackage* other);
  friend void swap(MovePackage& a, MovePackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovePackage* New() const final {
    return CreateMaybeMessage<MovePackage>(NULL);
  }

  MovePackage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MovePackage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MovePackage& from);
  void MergeFrom(const MovePackage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovePackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Position Pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  const ::pb::Position& _internal_pos() const;
  public:
  const ::pb::Position& pos() const;
  ::pb::Position* release_pos();
  ::pb::Position* mutable_pos();
  void set_allocated_pos(::pb::Position* pos);

  // int32 actionData = 2;
  void clear_actiondata();
  static const int kActionDataFieldNumber = 2;
  ::google::protobuf::int32 actiondata() const;
  void set_actiondata(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.MovePackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Position* pos_;
  ::google::protobuf::int32 actiondata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadCast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BroadCast) */ {
 public:
  BroadCast();
  virtual ~BroadCast();

  BroadCast(const BroadCast& from);

  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadCast(BroadCast&& from) noexcept
    : BroadCast() {
    *this = ::std::move(from);
  }

  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadCast& default_instance();

  enum DataCase {
    kContent = 3,
    kPos = 4,
    kActionData = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
               &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BroadCast* other);
  friend void swap(BroadCast& a, BroadCast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadCast* New() const final {
    return CreateMaybeMessage<BroadCast>(NULL);
  }

  BroadCast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadCast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadCast& from);
  void MergeFrom(const BroadCast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadCast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // int32 Tp = 2;
  void clear_tp();
  static const int kTpFieldNumber = 2;
  ::google::protobuf::int32 tp() const;
  void set_tp(::google::protobuf::int32 value);

  // string Content = 3;
  private:
  bool has_content() const;
  public:
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .pb.Position Pos = 4;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  private:
  const ::pb::Position& _internal_pos() const;
  public:
  const ::pb::Position& pos() const;
  ::pb::Position* release_pos();
  ::pb::Position* mutable_pos();
  void set_allocated_pos(::pb::Position* pos);

  // int32 ActionData = 5;
  private:
  bool has_actiondata() const;
  public:
  void clear_actiondata();
  static const int kActionDataFieldNumber = 5;
  ::google::protobuf::int32 actiondata() const;
  void set_actiondata(::google::protobuf::int32 value);

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:pb.BroadCast)
 private:
  void set_has_content();
  void set_has_pos();
  void set_has_actiondata();

  inline bool has_Data() const;
  inline void clear_has_Data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 tp_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::pb::Position* pos_;
    ::google::protobuf::int32 actiondata_;
  } Data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Talk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Talk) */ {
 public:
  Talk();
  virtual ~Talk();

  Talk(const Talk& from);

  inline Talk& operator=(const Talk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Talk(Talk&& from) noexcept
    : Talk() {
    *this = ::std::move(from);
  }

  inline Talk& operator=(Talk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Talk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Talk* internal_default_instance() {
    return reinterpret_cast<const Talk*>(
               &_Talk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Talk* other);
  friend void swap(Talk& a, Talk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Talk* New() const final {
    return CreateMaybeMessage<Talk>(NULL);
  }

  Talk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Talk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Talk& from);
  void MergeFrom(const Talk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pb.Talk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPid

// int32 Pid = 1;
inline void SyncPid::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 SyncPid::pid() const {
  // @@protoc_insertion_point(field_get:pb.SyncPid.Pid)
  return pid_;
}
inline void SyncPid::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.SyncPid.Pid)
}

// string Username = 2;
inline void SyncPid::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncPid::username() const {
  // @@protoc_insertion_point(field_get:pb.SyncPid.Username)
  return username_.GetNoArena();
}
inline void SyncPid::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SyncPid.Username)
}
#if LANG_CXX11
inline void SyncPid::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SyncPid.Username)
}
#endif
inline void SyncPid::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SyncPid.Username)
}
inline void SyncPid::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SyncPid.Username)
}
inline ::std::string* SyncPid::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pb.SyncPid.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncPid::release_username() {
  // @@protoc_insertion_point(field_release:pb.SyncPid.Username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncPid::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pb.SyncPid.Username)
}

// -------------------------------------------------------------------

// Player

// int32 Pid = 1;
inline void Player::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 Player::pid() const {
  // @@protoc_insertion_point(field_get:pb.Player.Pid)
  return pid_;
}
inline void Player::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.Player.Pid)
}

// .pb.Position pos = 2;
inline bool Player::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void Player::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
inline const ::pb::Position& Player::_internal_pos() const {
  return *pos_;
}
inline const ::pb::Position& Player::pos() const {
  const ::pb::Position* p = pos_;
  // @@protoc_insertion_point(field_get:pb.Player.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Position*>(
      &::pb::_Position_default_instance_);
}
inline ::pb::Position* Player::release_pos() {
  // @@protoc_insertion_point(field_release:pb.Player.pos)
  
  ::pb::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::pb::Position* Player::mutable_pos() {
  
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Player.pos)
  return pos_;
}
inline void Player::set_allocated_pos(::pb::Position* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.Player.pos)
}

// string UserName = 3;
inline void Player::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Player::username() const {
  // @@protoc_insertion_point(field_get:pb.Player.UserName)
  return username_.GetNoArena();
}
inline void Player::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Player.UserName)
}
#if LANG_CXX11
inline void Player::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Player.UserName)
}
#endif
inline void Player::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Player.UserName)
}
inline void Player::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Player.UserName)
}
inline ::std::string* Player::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pb.Player.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_username() {
  // @@protoc_insertion_point(field_release:pb.Player.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pb.Player.UserName)
}

// -------------------------------------------------------------------

// SyncPlayers

// repeated .pb.Player ps = 1;
inline int SyncPlayers::ps_size() const {
  return ps_.size();
}
inline void SyncPlayers::clear_ps() {
  ps_.Clear();
}
inline ::pb::Player* SyncPlayers::mutable_ps(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SyncPlayers.ps)
  return ps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Player >*
SyncPlayers::mutable_ps() {
  // @@protoc_insertion_point(field_mutable_list:pb.SyncPlayers.ps)
  return &ps_;
}
inline const ::pb::Player& SyncPlayers::ps(int index) const {
  // @@protoc_insertion_point(field_get:pb.SyncPlayers.ps)
  return ps_.Get(index);
}
inline ::pb::Player* SyncPlayers::add_ps() {
  // @@protoc_insertion_point(field_add:pb.SyncPlayers.ps)
  return ps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Player >&
SyncPlayers::ps() const {
  // @@protoc_insertion_point(field_list:pb.SyncPlayers.ps)
  return ps_;
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:pb.Position.x)
  return x_;
}
inline void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:pb.Position.y)
  return y_;
}
inline void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:pb.Position.z)
  return z_;
}
inline void Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.z)
}

// float v = 4;
inline void Position::clear_v() {
  v_ = 0;
}
inline float Position::v() const {
  // @@protoc_insertion_point(field_get:pb.Position.v)
  return v_;
}
inline void Position::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.v)
}

// int32 hp = 5;
inline void Position::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 Position::hp() const {
  // @@protoc_insertion_point(field_get:pb.Position.hp)
  return hp_;
}
inline void Position::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.hp)
}

// -------------------------------------------------------------------

// MovePackage

// .pb.Position Pos = 1;
inline bool MovePackage::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void MovePackage::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
inline const ::pb::Position& MovePackage::_internal_pos() const {
  return *pos_;
}
inline const ::pb::Position& MovePackage::pos() const {
  const ::pb::Position* p = pos_;
  // @@protoc_insertion_point(field_get:pb.MovePackage.Pos)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Position*>(
      &::pb::_Position_default_instance_);
}
inline ::pb::Position* MovePackage::release_pos() {
  // @@protoc_insertion_point(field_release:pb.MovePackage.Pos)
  
  ::pb::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::pb::Position* MovePackage::mutable_pos() {
  
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.MovePackage.Pos)
  return pos_;
}
inline void MovePackage::set_allocated_pos(::pb::Position* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.MovePackage.Pos)
}

// int32 actionData = 2;
inline void MovePackage::clear_actiondata() {
  actiondata_ = 0;
}
inline ::google::protobuf::int32 MovePackage::actiondata() const {
  // @@protoc_insertion_point(field_get:pb.MovePackage.actionData)
  return actiondata_;
}
inline void MovePackage::set_actiondata(::google::protobuf::int32 value) {
  
  actiondata_ = value;
  // @@protoc_insertion_point(field_set:pb.MovePackage.actionData)
}

// -------------------------------------------------------------------

// BroadCast

// int32 Pid = 1;
inline void BroadCast::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 BroadCast::pid() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Pid)
  return pid_;
}
inline void BroadCast::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.BroadCast.Pid)
}

// int32 Tp = 2;
inline void BroadCast::clear_tp() {
  tp_ = 0;
}
inline ::google::protobuf::int32 BroadCast::tp() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Tp)
  return tp_;
}
inline void BroadCast::set_tp(::google::protobuf::int32 value) {
  
  tp_ = value;
  // @@protoc_insertion_point(field_set:pb.BroadCast.Tp)
}

// string Content = 3;
inline bool BroadCast::has_content() const {
  return Data_case() == kContent;
}
inline void BroadCast::set_has_content() {
  _oneof_case_[0] = kContent;
}
inline void BroadCast::clear_content() {
  if (has_content()) {
    Data_.content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Data();
  }
}
inline const ::std::string& BroadCast::content() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Content)
  if (has_content()) {
    return Data_.content_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BroadCast::set_content(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BroadCast.Content)
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.Content)
}
#if LANG_CXX11
inline void BroadCast::set_content(::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BroadCast.Content)
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BroadCast.Content)
}
#endif
inline void BroadCast::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BroadCast.Content)
}
inline void BroadCast::set_content(const char* value, size_t size) {
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BroadCast.Content)
}
inline ::std::string* BroadCast::mutable_content() {
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.Content)
  return Data_.content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadCast::release_content() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.Content)
  if (has_content()) {
    clear_has_Data();
    return Data_.content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void BroadCast::set_allocated_content(::std::string* content) {
  if (!has_content()) {
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Data();
  if (content != NULL) {
    set_has_content();
    Data_.content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BroadCast.Content)
}

// .pb.Position Pos = 4;
inline bool BroadCast::has_pos() const {
  return Data_case() == kPos;
}
inline void BroadCast::set_has_pos() {
  _oneof_case_[0] = kPos;
}
inline void BroadCast::clear_pos() {
  if (has_pos()) {
    delete Data_.pos_;
    clear_has_Data();
  }
}
inline const ::pb::Position& BroadCast::_internal_pos() const {
  return *Data_.pos_;
}
inline ::pb::Position* BroadCast::release_pos() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.Pos)
  if (has_pos()) {
    clear_has_Data();
      ::pb::Position* temp = Data_.pos_;
    Data_.pos_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::Position& BroadCast::pos() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Pos)
  return has_pos()
      ? *Data_.pos_
      : *reinterpret_cast< ::pb::Position*>(&::pb::_Position_default_instance_);
}
inline ::pb::Position* BroadCast::mutable_pos() {
  if (!has_pos()) {
    clear_Data();
    set_has_pos();
    Data_.pos_ = CreateMaybeMessage< ::pb::Position >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.Pos)
  return Data_.pos_;
}

// int32 ActionData = 5;
inline bool BroadCast::has_actiondata() const {
  return Data_case() == kActionData;
}
inline void BroadCast::set_has_actiondata() {
  _oneof_case_[0] = kActionData;
}
inline void BroadCast::clear_actiondata() {
  if (has_actiondata()) {
    Data_.actiondata_ = 0;
    clear_has_Data();
  }
}
inline ::google::protobuf::int32 BroadCast::actiondata() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.ActionData)
  if (has_actiondata()) {
    return Data_.actiondata_;
  }
  return 0;
}
inline void BroadCast::set_actiondata(::google::protobuf::int32 value) {
  if (!has_actiondata()) {
    clear_Data();
    set_has_actiondata();
  }
  Data_.actiondata_ = value;
  // @@protoc_insertion_point(field_set:pb.BroadCast.ActionData)
}

inline bool BroadCast::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void BroadCast::clear_has_Data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline BroadCast::DataCase BroadCast::Data_case() const {
  return BroadCast::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Talk

// string Content = 1;
inline void Talk::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Talk::content() const {
  // @@protoc_insertion_point(field_get:pb.Talk.Content)
  return content_.GetNoArena();
}
inline void Talk::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Talk.Content)
}
#if LANG_CXX11
inline void Talk::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Talk.Content)
}
#endif
inline void Talk::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Talk.Content)
}
inline void Talk::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Talk.Content)
}
inline ::std::string* Talk::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:pb.Talk.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Talk::release_content() {
  // @@protoc_insertion_point(field_release:pb.Talk.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Talk::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pb.Talk.Content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_2eproto
